{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt  # 2D plotting\n",
    "import seaborn as sns  \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Read the data and parse in correct format\n",
    "#Read in project file\n",
    "filename = 'beeradvocate.txt'\n",
    "data = pd.read_csv(filename, quoting=3, delimiter='\\r', header=None, skip_blank_lines=True, engine='c')\n",
    "#Parse file and create a dataframe\n",
    "import re\n",
    "\n",
    "def parse_my_file(filename):\n",
    "   with open(filename, encoding='utf8') as f:\n",
    "       for l in f:\n",
    "           line = l.rstrip()\n",
    "           if line:\n",
    "               yield re.split(': ', line.strip(),1)\n",
    "   f.close()\n",
    "my_parser = parse_my_file(filename)\n",
    "columns = ['category', 'value']\n",
    "df = pd.DataFrame(my_parser, columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nums = range(0,1586614)\n",
    "index = []\n",
    "for num in nums:\n",
    "    index.extend([num for i in range(13)])\n",
    "df['index'] = index\n",
    "reviews = df.pivot(columns='category', values='value', index='index')\n",
    "reviews[[col for col in reviews.columns if ':' in col]]\n",
    "reviews.drop(['beer/ABV:', 'review/profileName:', 'review/text:'], axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>category</th>\n",
       "      <th>beer/ABV</th>\n",
       "      <th>beer/beerId</th>\n",
       "      <th>beer/brewerId</th>\n",
       "      <th>beer/name</th>\n",
       "      <th>beer/style</th>\n",
       "      <th>review/appearance</th>\n",
       "      <th>review/aroma</th>\n",
       "      <th>review/overall</th>\n",
       "      <th>review/palate</th>\n",
       "      <th>review/profileName</th>\n",
       "      <th>review/taste</th>\n",
       "      <th>review/text</th>\n",
       "      <th>review/time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47986</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>Hefeweizen</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>1.5</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>1234817823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6.20</td>\n",
       "      <td>48213</td>\n",
       "      <td>10325</td>\n",
       "      <td>Red Moon</td>\n",
       "      <td>English Strong Ale</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Dark red color, light beige foam, average.\\tIn...</td>\n",
       "      <td>1235915097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.50</td>\n",
       "      <td>48215</td>\n",
       "      <td>10325</td>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>Foreign / Export Stout</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Almost totally black. Beige foam, quite compac...</td>\n",
       "      <td>1235916604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47969</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>German Pilsener</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Golden yellow color. White, compact foam, quit...</td>\n",
       "      <td>1234725145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.70</td>\n",
       "      <td>64883</td>\n",
       "      <td>1075</td>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>American Double / Imperial IPA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>johnmichaelsen</td>\n",
       "      <td>4.5</td>\n",
       "      <td>According to the website, the style for the Ca...</td>\n",
       "      <td>1293735206</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "category beer/ABV beer/beerId beer/brewerId               beer/name  \\\n",
       "index                                                                 \n",
       "0            5.00       47986         10325            Sausa Weizen   \n",
       "1            6.20       48213         10325                Red Moon   \n",
       "2            6.50       48215         10325  Black Horse Black Beer   \n",
       "3            5.00       47969         10325              Sausa Pils   \n",
       "4            7.70       64883          1075           Cauldron DIPA   \n",
       "\n",
       "category                      beer/style review/appearance review/aroma  \\\n",
       "index                                                                     \n",
       "0                             Hefeweizen               2.5            2   \n",
       "1                     English Strong Ale                 3          2.5   \n",
       "2                 Foreign / Export Stout                 3          2.5   \n",
       "3                        German Pilsener               3.5            3   \n",
       "4         American Double / Imperial IPA                 4          4.5   \n",
       "\n",
       "category review/overall review/palate review/profileName review/taste  \\\n",
       "index                                                                   \n",
       "0                   1.5           1.5            stcules          1.5   \n",
       "1                     3             3            stcules            3   \n",
       "2                     3             3            stcules            3   \n",
       "3                     3           2.5            stcules            3   \n",
       "4                     4             4     johnmichaelsen          4.5   \n",
       "\n",
       "category                                        review/text review/time  \n",
       "index                                                                    \n",
       "0         A lot of foam. But a lot.\\tIn the smell some b...  1234817823  \n",
       "1         Dark red color, light beige foam, average.\\tIn...  1235915097  \n",
       "2         Almost totally black. Beige foam, quite compac...  1235916604  \n",
       "3         Golden yellow color. White, compact foam, quit...  1234725145  \n",
       "4         According to the website, the style for the Ca...  1293735206  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>category</th>\n",
       "      <th>beer/ABV</th>\n",
       "      <th>beer/beerId</th>\n",
       "      <th>beer/brewerId</th>\n",
       "      <th>beer/name</th>\n",
       "      <th>beer/style</th>\n",
       "      <th>review/appearance</th>\n",
       "      <th>review/aroma</th>\n",
       "      <th>review/overall</th>\n",
       "      <th>review/palate</th>\n",
       "      <th>review/profileName</th>\n",
       "      <th>review/taste</th>\n",
       "      <th>review/text</th>\n",
       "      <th>review/time</th>\n",
       "      <th>review/str</th>\n",
       "      <th>review/len</th>\n",
       "      <th>review/roundrating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47986</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>Hefeweizen</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>1.5</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>1234817823</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>262</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6.20</td>\n",
       "      <td>48213</td>\n",
       "      <td>10325</td>\n",
       "      <td>Red Moon</td>\n",
       "      <td>English Strong Ale</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Dark red color, light beige foam, average.\\tIn...</td>\n",
       "      <td>1235915097</td>\n",
       "      <td>Dark red color, light beige foam, average.\\tIn...</td>\n",
       "      <td>338</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.50</td>\n",
       "      <td>48215</td>\n",
       "      <td>10325</td>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>Foreign / Export Stout</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Almost totally black. Beige foam, quite compac...</td>\n",
       "      <td>1235916604</td>\n",
       "      <td>Almost totally black. Beige foam, quite compac...</td>\n",
       "      <td>396</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47969</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>German Pilsener</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Golden yellow color. White, compact foam, quit...</td>\n",
       "      <td>1234725145</td>\n",
       "      <td>Golden yellow color. White, compact foam, quit...</td>\n",
       "      <td>401</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.70</td>\n",
       "      <td>64883</td>\n",
       "      <td>1075</td>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>American Double / Imperial IPA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>johnmichaelsen</td>\n",
       "      <td>4.5</td>\n",
       "      <td>According to the website, the style for the Ca...</td>\n",
       "      <td>1293735206</td>\n",
       "      <td>According to the website, the style for the Ca...</td>\n",
       "      <td>1145</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "category beer/ABV beer/beerId beer/brewerId               beer/name  \\\n",
       "index                                                                 \n",
       "0            5.00       47986         10325            Sausa Weizen   \n",
       "1            6.20       48213         10325                Red Moon   \n",
       "2            6.50       48215         10325  Black Horse Black Beer   \n",
       "3            5.00       47969         10325              Sausa Pils   \n",
       "4            7.70       64883          1075           Cauldron DIPA   \n",
       "\n",
       "category                      beer/style review/appearance review/aroma  \\\n",
       "index                                                                     \n",
       "0                             Hefeweizen               2.5            2   \n",
       "1                     English Strong Ale                 3          2.5   \n",
       "2                 Foreign / Export Stout                 3          2.5   \n",
       "3                        German Pilsener               3.5            3   \n",
       "4         American Double / Imperial IPA                 4          4.5   \n",
       "\n",
       "category  review/overall review/palate review/profileName review/taste  \\\n",
       "index                                                                    \n",
       "0                    1.5           1.5            stcules          1.5   \n",
       "1                    3.0             3            stcules            3   \n",
       "2                    3.0             3            stcules            3   \n",
       "3                    3.0           2.5            stcules            3   \n",
       "4                    4.0             4     johnmichaelsen          4.5   \n",
       "\n",
       "category                                        review/text review/time  \\\n",
       "index                                                                     \n",
       "0         A lot of foam. But a lot.\\tIn the smell some b...  1234817823   \n",
       "1         Dark red color, light beige foam, average.\\tIn...  1235915097   \n",
       "2         Almost totally black. Beige foam, quite compac...  1235916604   \n",
       "3         Golden yellow color. White, compact foam, quit...  1234725145   \n",
       "4         According to the website, the style for the Ca...  1293735206   \n",
       "\n",
       "category                                         review/str  review/len  \\\n",
       "index                                                                     \n",
       "0         A lot of foam. But a lot.\\tIn the smell some b...         262   \n",
       "1         Dark red color, light beige foam, average.\\tIn...         338   \n",
       "2         Almost totally black. Beige foam, quite compac...         396   \n",
       "3         Golden yellow color. White, compact foam, quit...         401   \n",
       "4         According to the website, the style for the Ca...        1145   \n",
       "\n",
       "category  review/roundrating  \n",
       "index                         \n",
       "0                        2.0  \n",
       "1                        3.0  \n",
       "2                        3.0  \n",
       "3                        3.0  \n",
       "4                        4.0  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data conversion\n",
    "reviews['review/str'] = reviews['review/text'].astype('str')\n",
    "reviews['review/len'] = reviews['review/str'].map(len)\n",
    "reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "reviews['review/overall'] = pd.to_numeric(reviews['review/overall'])\n",
    "reviews['review/roundrating'] = np.round(reviews['review/overall'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\neQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1296x216 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot showing that the data is biased with most of the reviews being positive with rating 4. Also reviews are 500 to 1000 words long.\n",
    "ax = sns.FacetGrid(data=reviews, col='review/roundrating', xlim=(0, 2000)).map(plt.hist, 'review/len', bins=30)\n",
    "ax.axes[0][0].set(ylabel='number of reviews');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reviews text processing.  \n",
    "Divide reviews in positive and negative reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Postive Reviews:  415,705\n",
      "Negative Reviews:  23,936\n"
     ]
    }
   ],
   "source": [
    "# Reviews text processing.\n",
    "# Divide reviews in positive and negative reviews\n",
    "pos_reviews = reviews['review/str'][reviews['review/overall']>4].values\n",
    "neg_reviews = reviews['review/str'][reviews['review/overall']<2].values\n",
    "print('Postive Reviews:  {:,}'.format(len(pos_reviews)))\n",
    "print('Negative Reviews:  {:,}'.format(len(neg_reviews)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "stopwords = stopwords.words('english')\n",
    "tfidf_pos = TfidfVectorizer(stop_words=stopwords, min_df=10, max_df=0.5, \n",
    "                        ngram_range=(1,1), token_pattern='[a-z][a-z]+')\n",
    "tfidf_neg = TfidfVectorizer(stop_words=stopwords, min_df=10, max_df=0.5, \n",
    "                        ngram_range=(1,1), token_pattern='[a-z][a-z]+')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "np.random.seed(38)\n",
    "num_reviews = 20000\n",
    "random_neg = np.random.choice(neg_reviews, size=num_reviews)\n",
    "random_pos = np.random.choice(pos_reviews, size=num_reviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "neg_vectors = tfidf_neg.fit_transform(neg_reviews)\n",
    "pos_vectors = tfidf_pos.fit_transform(pos_reviews)\n",
    "#neg_df = pd.DataFrame(neg_vectors.todense(), columns=[tfidf_neg.get_feature_names()])\n",
    "#pos_df = pd.DataFrame(pos_vectors.todense(), columns=[tfidf_pos.get_feature_names()])\n",
    "#col_means_neg = {}\n",
    "#for col in neg_df:\n",
    "#    col_means_neg[col] = neg_df[col].mean()\n",
    "#col_means_pos = {}\n",
    "#for col in pos_df:\n",
    "#    col_means_pos[col] = pos_df[col].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 8 words in POSITIVE reviews:"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'col_means_pos' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-2e55de6158f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnum_top_words\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Top %d words in POSITIVE reviews:'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0mnum_top_words\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol_means_pos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_means_pos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnum_top_words\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Top %d words in NEGATIVE reviews:'\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0mnum_top_words\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol_means_neg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcol_means_neg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnum_top_words\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'col_means_pos' is not defined"
     ]
    }
   ],
   "source": [
    "#num_top_words = 8\n",
    "#print('Top %d words in POSITIVE reviews:' %num_top_words, end='')\n",
    "#print(sorted(col_means_pos, key=col_means_pos.get, reverse=True)[:num_top_words])\n",
    "#print('Top %d words in NEGATIVE reviews:' %num_top_words, end='')\n",
    "#print(sorted(col_means_neg, key=col_means_neg.get, reverse=True)[:num_top_words])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<23936x7617 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 1235557 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Non negative matrix factorization\n",
    "from sklearn.decomposition import NMF\n",
    "num_topics = 6\n",
    "nmf_pos = NMF(n_components=num_topics)\n",
    "W_pos = nmf_pos.fit_transform(pos_vectors)\n",
    "H_pos = nmf_pos.components_\n",
    "nmf_neg = NMF(n_components=num_topics)\n",
    "W_neg = nmf_neg.fit_transform(neg_vectors)\n",
    "H_neg = nmf_neg.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top topics + words for POSITIVE reviews\n",
      "---------------------------------------\n",
      "Topic 0:   3.777*hops, 2.788*hop, 2.376*citrus, 2.313*malt, 2.070*ipa, 1.877*pine\n",
      "Topic 1:   3.803*coffee, 3.748*chocolate, 2.431*roasted, 1.957*black, 1.716*dark, 1.640*stout\n",
      "Topic 2:   2.121*dark, 1.782*brown, 1.565*alcohol, 1.530*caramel, 1.499*sweet, 1.146*bourbon\n",
      "Topic 3:   2.222*one, 2.168*like, 1.387*really, 1.293*would, 1.244*smell, 1.160*much\n",
      "Topic 4:   2.584*light, 1.621*yeast, 1.614*wheat, 1.424*white, 1.350*lemon, 1.265*banana\n",
      "Topic 5:   5.478*nice, 1.602*good, 0.878*malty, 0.862*color, 0.802*great, 0.773*really\n",
      "\n",
      "Top topics + words for NEGATIVE reviews\n",
      "---------------------------------------\n",
      "Topic 0:   1.188*hops, 1.030*malt, 0.842*flavor, 0.842*aroma, 0.796*hop, 0.736*bitter\n",
      "Topic 1:   1.371*light, 1.066*corn, 0.953*water, 0.904*yellow, 0.714*watery, 0.667*pale\n",
      "Topic 2:   0.901*one, 0.731*bad, 0.646*would, 0.585*drink, 0.580*really, 0.566*good\n",
      "Topic 3:   2.096*sweet, 1.718*alcohol, 0.461*sugar, 0.418*strong, 0.415*syrupy, 0.387*syrup\n",
      "Topic 4:   1.423*chocolate, 1.339*coffee, 1.225*dark, 0.945*black, 0.874*brown, 0.779*roasted\n",
      "Topic 5:   2.137*sour, 0.654*cherry, 0.451*bad, 0.447*fruit, 0.443*tart, 0.369*vinegar\n"
     ]
    }
   ],
   "source": [
    "# Top topics for positive and negative reviews\n",
    "def display_topics(model, feature_names, num_topics, no_top_words):\n",
    "    for topic_idx, topic in enumerate(model.components_):\n",
    "        if topic_idx < num_topics:\n",
    "            print(\"{:11}\".format(\"Topic %d:\" %(topic_idx)), end='')\n",
    "            print(\", \".join(['{:04.3f}*'.format(topic[i])+feature_names[i] \\\n",
    "                             for i in topic.argsort()[:-no_top_words-1:-1]]))\n",
    "no_topics = num_topics\n",
    "no_top_words = 6\n",
    "print('Top topics + words for POSITIVE reviews')\n",
    "print('-'*39)\n",
    "display_topics(nmf_pos, tfidf_pos.get_feature_names(), no_topics, no_top_words)\n",
    "print('\\nTop topics + words for NEGATIVE reviews')\n",
    "print('-'*39)\n",
    "display_topics(nmf_neg, tfidf_neg.get_feature_names(), no_topics, no_top_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6761\n",
      "Had a pitcher of this on tap with some friends tonight. It was a copper color, with a small head. Taste is pretty good, it is a bit sweet as other reviews have mentioned, but I don't find that a bad thing in this brew. The hops were predominant as would be expected, and there was a nice malt backbone. I thought this was a nicely balanced and very drinkable pale ale. I would definitely drink this again, and I would recommend trying it.\n"
     ]
    }
   ],
   "source": [
    "review_num = np.random.randint(0, high=len(random_pos))\n",
    "print(review_num)\n",
    "print(random_pos[review_num])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive Review #3743\n",
      "-------------------------\n",
      "A - Lovely crystal red with lots of caramel color. Very little white head remains with no lacing. But, a large voluptuous head pours liquid white. \t\tS - Lots of grape, yes grape. Deep bourbon hidden within. Amazingly bourbon when you get below the surface layer. Smells like champagne yeast was used... no Belgain?\t\tT - Slight bourbon flavor with deep bourbon burn. Very smooth and delicious. Exactly as style should be. \t\tM - Slight over carbonation. Dry. Some heat. \t\tO - A nice brew. A bit strong, but nothing one man couldn't handle ;) Recommended.\n",
      "-------------------------\n",
      "Topic 1: 0.0361\n",
      "Topic 2: 0.0045\n",
      "Topic 0: 0.0035\n",
      "Topic 3: 0.0033\n",
      "Topic 5: 0.0020\n",
      "Topic 4: 0.0016\n"
     ]
    }
   ],
   "source": [
    "#random positive review\n",
    "review_num = np.random.randint(0, high=len(random_pos))\n",
    "print('Positive Review #%d' %review_num)\n",
    "print('-'*25)\n",
    "print(random_pos[review_num])\n",
    "print('-'*25)\n",
    "topic_dict = {}\n",
    "for ind, w in enumerate(W_pos[review_num]):\n",
    "    topic_dict[ind] = w\n",
    "for k in sorted(topic_dict, key=topic_dict.get, reverse=True):\n",
    "     print('Topic {}: {:.4f}'.format(k, topic_dict[k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Negative Review #32636\n",
      "-------------------------\n",
      "This beer's score is rather shocking to me.\t\tPours a dull red. Inch or two of white foam. Smells like ... what is that? Kind of a herbally, hoppy scent, maybe some yeast ... pretty weird.\t\tTaste is just all over the place. A weird astringent minty/herbaliness, maybe some piney/earthy hops (just a bit), and a strange overly sweet caramel malt base. Just bizarre tasting. \t\tWill avoid in the future.\n",
      "-------------------------\n",
      "Topic 1: 0.0409\n",
      "Topic 0: 0.0102\n",
      "Topic 5: 0.0091\n",
      "Topic 2: 0.0020\n",
      "Topic 3: 0.0015\n",
      "Topic 4: 0.0000\n"
     ]
    }
   ],
   "source": [
    "#random negative review\n",
    "review_num = np.random.randint(0, high=len(random_neg))\n",
    "print('Negative Review #%d' %review_num)\n",
    "print('-'*25)\n",
    "print(random_neg[review_num])\n",
    "print('-'*25)\n",
    "topic_dict = {}\n",
    "for ind, w in enumerate(W_neg[review_num]):\n",
    "    topic_dict[ind] = w\n",
    "for k in sorted(topic_dict, key=topic_dict.get, reverse=True):\n",
    "     print('Topic {}: {:.4f}'.format(k, topic_dict[k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topics for POSITIVE reviews\n",
      "---------------------------------------\n",
      "Topic 0:   4.721*hops, 3.362*hop, 2.985*malt, 2.930*citrus, 2.546*ipa, 2.249*pine\n",
      "Topic 1:   4.647*coffee, 4.631*chocolate, 3.180*roasted, 2.471*black, 2.258*dark, 2.005*stout\n",
      "Topic 2:   2.573*dark, 2.368*brown, 2.216*sweet, 2.206*caramel, 2.067*alcohol, 1.338*fruit\n",
      "Topic 3:   2.888*like, 2.633*one, 1.840*really, 1.725*would, 1.649*smell, 1.630*much\n",
      "Topic 4:   3.665*light, 2.155*wheat, 2.064*yeast, 1.849*white, 1.637*lemon, 1.540*banana\n",
      "Topic 5:   6.907*nice, 1.740*good, 1.121*malty, 0.955*color, 0.853*smell, 0.702*really\n",
      "\n",
      "Topics for NEGATIVE reviews\n",
      "---------------------------------------\n",
      "Topic 0:   1.994*hops, 1.546*malt, 1.365*hop, 1.072*bitter, 1.029*bitterness, 0.888*medium\n",
      "Topic 1:   2.008*light, 1.394*corn, 1.132*yellow, 0.951*watery, 0.935*pale, 0.750*water\n",
      "Topic 2:   1.061*one, 0.896*bad, 0.778*would, 0.775*good, 0.769*really, 0.718*drink\n",
      "Topic 3:   1.774*coffee, 1.734*chocolate, 1.513*dark, 1.131*black, 1.088*roasted, 1.068*brown\n",
      "Topic 4:   2.709*sweet, 2.140*alcohol, 0.625*sugar, 0.569*sweetness, 0.519*strong, 0.517*syrupy\n",
      "Topic 5:   1.462*sour, 0.920*wheat, 0.906*pumpkin, 0.708*orange, 0.513*spice, 0.512*fruit\n"
     ]
    }
   ],
   "source": [
    "no_topics = num_topics\n",
    "no_top_words = 6\n",
    "\n",
    "print('Topics for POSITIVE reviews')\n",
    "print('-'*39)\n",
    "display_topics(nmf_pos, tfidf_pos.get_feature_names(), no_topics, no_top_words)\n",
    "\n",
    "print('\\nTopics for NEGATIVE reviews')\n",
    "print('-'*39)\n",
    "display_topics(nmf_neg, tfidf_neg.get_feature_names(), no_topics, no_top_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>category</th>\n",
       "      <th>beer/ABV</th>\n",
       "      <th>beer/beerId</th>\n",
       "      <th>beer/brewerId</th>\n",
       "      <th>beer/name</th>\n",
       "      <th>beer/style</th>\n",
       "      <th>review/appearance</th>\n",
       "      <th>review/aroma</th>\n",
       "      <th>review/overall</th>\n",
       "      <th>review/palate</th>\n",
       "      <th>review/profileName</th>\n",
       "      <th>review/taste</th>\n",
       "      <th>review/text</th>\n",
       "      <th>review/time</th>\n",
       "      <th>review/str</th>\n",
       "      <th>review/len</th>\n",
       "      <th>review/roundrating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47986</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>Hefeweizen</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>1.5</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>1234817823</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>262</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6.20</td>\n",
       "      <td>48213</td>\n",
       "      <td>10325</td>\n",
       "      <td>Red Moon</td>\n",
       "      <td>English Strong Ale</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Dark red color, light beige foam, average.\\tIn...</td>\n",
       "      <td>1235915097</td>\n",
       "      <td>Dark red color, light beige foam, average.\\tIn...</td>\n",
       "      <td>338</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.50</td>\n",
       "      <td>48215</td>\n",
       "      <td>10325</td>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>Foreign / Export Stout</td>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Almost totally black. Beige foam, quite compac...</td>\n",
       "      <td>1235916604</td>\n",
       "      <td>Almost totally black. Beige foam, quite compac...</td>\n",
       "      <td>396</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.00</td>\n",
       "      <td>47969</td>\n",
       "      <td>10325</td>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>German Pilsener</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>3</td>\n",
       "      <td>Golden yellow color. White, compact foam, quit...</td>\n",
       "      <td>1234725145</td>\n",
       "      <td>Golden yellow color. White, compact foam, quit...</td>\n",
       "      <td>401</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.70</td>\n",
       "      <td>64883</td>\n",
       "      <td>1075</td>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>American Double / Imperial IPA</td>\n",
       "      <td>4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>johnmichaelsen</td>\n",
       "      <td>4.5</td>\n",
       "      <td>According to the website, the style for the Ca...</td>\n",
       "      <td>1293735206</td>\n",
       "      <td>According to the website, the style for the Ca...</td>\n",
       "      <td>1145</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "category beer/ABV beer/beerId beer/brewerId               beer/name  \\\n",
       "index                                                                 \n",
       "0            5.00       47986         10325            Sausa Weizen   \n",
       "1            6.20       48213         10325                Red Moon   \n",
       "2            6.50       48215         10325  Black Horse Black Beer   \n",
       "3            5.00       47969         10325              Sausa Pils   \n",
       "4            7.70       64883          1075           Cauldron DIPA   \n",
       "\n",
       "category                      beer/style review/appearance review/aroma  \\\n",
       "index                                                                     \n",
       "0                             Hefeweizen               2.5            2   \n",
       "1                     English Strong Ale                 3          2.5   \n",
       "2                 Foreign / Export Stout                 3          2.5   \n",
       "3                        German Pilsener               3.5            3   \n",
       "4         American Double / Imperial IPA                 4          4.5   \n",
       "\n",
       "category  review/overall review/palate review/profileName review/taste  \\\n",
       "index                                                                    \n",
       "0                    1.5           1.5            stcules          1.5   \n",
       "1                    3.0             3            stcules            3   \n",
       "2                    3.0             3            stcules            3   \n",
       "3                    3.0           2.5            stcules            3   \n",
       "4                    4.0             4     johnmichaelsen          4.5   \n",
       "\n",
       "category                                        review/text review/time  \\\n",
       "index                                                                     \n",
       "0         A lot of foam. But a lot.\\tIn the smell some b...  1234817823   \n",
       "1         Dark red color, light beige foam, average.\\tIn...  1235915097   \n",
       "2         Almost totally black. Beige foam, quite compac...  1235916604   \n",
       "3         Golden yellow color. White, compact foam, quit...  1234725145   \n",
       "4         According to the website, the style for the Ca...  1293735206   \n",
       "\n",
       "category                                         review/str  review/len  \\\n",
       "index                                                                     \n",
       "0         A lot of foam. But a lot.\\tIn the smell some b...         262   \n",
       "1         Dark red color, light beige foam, average.\\tIn...         338   \n",
       "2         Almost totally black. Beige foam, quite compac...         396   \n",
       "3         Golden yellow color. White, compact foam, quit...         401   \n",
       "4         According to the website, the style for the Ca...        1145   \n",
       "\n",
       "category  review/roundrating  \n",
       "index                         \n",
       "0                        2.0  \n",
       "1                        3.0  \n",
       "2                        3.0  \n",
       "3                        3.0  \n",
       "4                        4.0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_pos = reviews[['beer/beerId', 'beer/style', 'review/overall', 'review/text', 'review/len']][reviews['review/overall']>3.5].reset_index()\n",
    "df_neg = reviews[['beer/beerId', 'beer/style', 'review/overall', 'review/text', 'review/len']][reviews['review/overall']<2.5].reset_index()\n",
    "df_pos.drop(labels='index', axis=1, inplace=True)\n",
    "df_neg.drop(labels='index', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalized Topic weights :  [[0.21973733 0.05360465 0.0173341  0.27241759 0.36048849 0.07641785]]\n",
      "Sum of normalized weights:  1.0000000000000002\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import normalize\n",
    "print('Normalized Topic weights : ', normalize(W_pos[0].reshape(1,-1), norm='l1'))\n",
    "print('Sum of normalized weights: ', normalize(W_pos[0].reshape(1,-1), norm='l1').sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# add normalized topic weights to each review\n",
    "df_pos = pd.concat([df_pos, pd.DataFrame(normalize(W_pos, norm='l1'))], axis=1)\n",
    "df_neg = pd.concat([df_neg, pd.DataFrame(normalize(W_neg, norm='l1'))], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beer/beerId</th>\n",
       "      <th>beer/style</th>\n",
       "      <th>review/overall</th>\n",
       "      <th>review/text</th>\n",
       "      <th>review/len</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>47986</td>\n",
       "      <td>Hefeweizen</td>\n",
       "      <td>1.5</td>\n",
       "      <td>A lot of foam. But a lot.\\tIn the smell some b...</td>\n",
       "      <td>262</td>\n",
       "      <td>0.237704</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.085523</td>\n",
       "      <td>0.166525</td>\n",
       "      <td>0.510249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10789</td>\n",
       "      <td>Oatmeal Stout</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Caldera presents yet another circumstance wher...</td>\n",
       "      <td>1667</td>\n",
       "      <td>0.015249</td>\n",
       "      <td>0.465715</td>\n",
       "      <td>0.490197</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002961</td>\n",
       "      <td>0.025877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58920</td>\n",
       "      <td>Belgian Strong Dark Ale</td>\n",
       "      <td>2.0</td>\n",
       "      <td>22 oz bomber to pint glass\\t\\tPours a rich red...</td>\n",
       "      <td>1506</td>\n",
       "      <td>0.548896</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.326962</td>\n",
       "      <td>0.095445</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.028697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20817</td>\n",
       "      <td>American Adjunct Lager</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Poured a very pale yellow. No head whatsoever....</td>\n",
       "      <td>431</td>\n",
       "      <td>0.345571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.652248</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002181</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20817</td>\n",
       "      <td>American Adjunct Lager</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Let me start by sharing what's on the side of ...</td>\n",
       "      <td>622</td>\n",
       "      <td>0.741358</td>\n",
       "      <td>0.012084</td>\n",
       "      <td>0.006191</td>\n",
       "      <td>0.240367</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  beer/beerId               beer/style  review/overall  \\\n",
       "0       47986               Hefeweizen             1.5   \n",
       "1       10789            Oatmeal Stout             2.0   \n",
       "2       58920  Belgian Strong Dark Ale             2.0   \n",
       "3       20817   American Adjunct Lager             2.0   \n",
       "4       20817   American Adjunct Lager             1.0   \n",
       "\n",
       "                                         review/text  review/len         0  \\\n",
       "0  A lot of foam. But a lot.\\tIn the smell some b...         262  0.237704   \n",
       "1  Caldera presents yet another circumstance wher...        1667  0.015249   \n",
       "2  22 oz bomber to pint glass\\t\\tPours a rich red...        1506  0.548896   \n",
       "3  Poured a very pale yellow. No head whatsoever....         431  0.345571   \n",
       "4  Let me start by sharing what's on the side of ...         622  0.741358   \n",
       "\n",
       "          1         2         3         4         5  \n",
       "0  0.000000  0.000000  0.085523  0.166525  0.510249  \n",
       "1  0.465715  0.490197  0.000000  0.002961  0.025877  \n",
       "2  0.000000  0.326962  0.095445  0.000000  0.028697  \n",
       "3  0.000000  0.652248  0.000000  0.002181  0.000000  \n",
       "4  0.012084  0.006191  0.240367  0.000000  0.000000  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_neg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_pos_bsns = df_pos.groupby('beer/style').agg({'review/overall':'mean', 'review/text':'count',\n",
    "                                                 'review/len':'mean',0:'mean', \n",
    "                                                 1:'mean', 2:'mean', 3:'mean',\n",
    "                                                 4:'mean', 5:'mean'}).reset_index()\n",
    "df_neg_bsns = df_neg.groupby('beer/style').agg({'review/overall':'mean', 'review/text':'count',\n",
    "                                                 'review/len':'mean',0:'mean', \n",
    "                                                 1:'mean', 2:'mean', 3:'mean',\n",
    "                                                 4:'mean', 5:'mean'}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_pos_bsns.sort_values(by = 'review/overall', inplace = True, ascending = False)\n",
    "df_neg_bsns.sort_values(by = 'review/overall', inplace = True, ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_pos_tot = df_pos_bsns.agg({'review/overall':'mean', 'review/text':'count',\n",
    "                                                 'review/len':'mean',0:'mean', \n",
    "                                                 1:'mean', 2:'mean', 3:'mean',\n",
    "                                                 4:'mean', 5:'mean'})\n",
    "df_neg_tot = df_neg_bsns.agg({'review/overall':'mean', 'review/text':'count',\n",
    "                                                 'review/len':'mean',0:'mean', \n",
    "                                                 1:'mean', 2:'mean', 3:'mean',\n",
    "                                                 4:'mean', 5:'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_pos_bsns.reset_index(inplace=True)\n",
    "df_neg_bsns.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9,)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pos_tot.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1af9a986a0>"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n4Z2xwMKIWBwRa4G7gIllbSYCt+Wv7wGOkFRXvTLNzKwaKgl9AUtLphvzea22iYj1wDtAfb5suKRn\nJD0m6fNbWa+ZmW2FSsb0W+uxt1TY5s/ArhGxUtJo4D5Jn4qId0sbSpoKTM1fV1CSmZl1RCU9/UZg\nSMn0YGDZ5tpI6g0MAN6MiDURsRIgIp4GFgF7lO8gIqZHxJiIGFNfX1++2MzMqqSS0J8PjJA0XNK2\nwGRgVlmbWcDp+esTgYcjokXSJ/ITwUj6JDACWFyd0s3MrL3aDP18jP5cYC7Z5ZczI2KBpKslTcib\n/RSol7QQuAi4JJ9/CPCcpN+TneD9WkS8We2DMDOzylR0nX5EzAZml827ouT1auCkVta7F7h3K2s0\nM7Mq8R25ZmYJceibmSXEoW9mlhCHvplZQhz6ZmYJceibmSXEoW9mlhCHvplZQhz6ZmYJceibmSXE\noW9mlhCHvplZQhz6ZmYJceibmSXEoW9mlhCHvplZQhz6ZmYJceibmSXEoW9mlhCHvplZQhz6ZmYJ\nceibmSXEoW9mlhCHvplZQhz6ZmYJceibmSXEoW9mlhCHvplZQhz6ZmYJceibmSXEoW9mlpDelTSS\n1ADcAPQCZkTEtWXL+wI/A0YDK4FJEbEkX3YpMAVoAs6PiLlVq97MzNqlzZ6+pF7ATcBRwEjgFEkj\ny5pNAd6KiN2Bfwb+MV93JDAZ+BTQANycb8/MzApQyfDOWGBhRCyOiLXAXcDEsjYTgdvy1/cAR0iq\ny+ffFRFrIuJPwMJ8e2ZmVoC6lpaWLTaQdCLQEBFfzaf/BjggIs4tafNC3qYxn14EHABcCTwREbfn\n838KzImIe8r2MRWYmk/uCfxh6w+tYgOBNzpxf53Nx9e9+fi6r84+tqER8Ym2GlUypl/Xyrzyd4rN\ntalkXSJiOjC9glqqTtJTETGmiH13Bh9f9+bj67666rFVMrzTCAwpmR4MLNtcG0m9gQHAmxWua2Zm\nnaSS0J8PjJA0XNK2ZCdmZ5W1mQWcnr8+EXg4Ilry+ZMl9ZU0HBgB/LY6pZuZWXu1GfoRsR44F5gL\nvATMjIgFkq6WNCFv9lOgXtJC4CLgknzdBcBM4EXgl8A3IqKp+oexVQoZVupEPr7uzcfXfXXJY2vz\nRK6ZmfUcviPXzCwhDn0zs4Q49M3MElLRs3d6Ekl7kd0pLLJ7BpYBsyLipUILs4rkvz8BT0bE+yXz\nGyLil8VVtvUkjQVaImJ+/giTBuDliJhdcGk1IelnEXFa0XXUgqTPkT194IWIeKDoekoldSJX0sXA\nKWSPkmjMZw8muwz1rvIHyfUkks6MiP9ddB1bQ9L5wDfIriLbF7ggIn6RL/tdROxfZH1bQ9I0sudb\n9Qbmkd3R/ihwJDA3Iv6+uOq2nqTyy7zrgMOAhwEiYsImK3Ujkn4bEWPz12eR/Tv9d2A88B9dKVtS\n6+lPAT4VEetKZ0r6AbAA6DK/mBq4CujWoQ+cBYyOiPclDQPukTQsIm6g9bu/u5MTyd7I+gLLgcER\n8a6k64EngW4d+mSdqxeBGXx0t/4Y4PtFFlVFfUpeTwXGRcQKSf8EPEEXypbUQr8Z2AV4pWz+zvmy\nbk3Sc5tZVAfs1Jm11EivDUM6EbFE0hfIgn8o3T/01+f3sKyStCgi3gWIiA8ldft/m2QBfwFwGfCd\niHhW0ocR8VjBdVXLNpJ2IDtPWhcRKwAi4gNJ64stbWOphf6FwEOS/ggszeftCuxOdgNad7cT8EXg\nrbL5dcDjnV9O1S2XtG9EPAuQ9/i/BNwKjCq2tK22VtLHImIV2fdSACBpAD2gQxIRzcA/S7o7//s1\nelb+DACeJvu/1iJpUEQsl9SfLtYh6Uk/9DZFxC8l7UF2gkVkv4xGYH4XvFO4I/4T6L8hFEtJerTz\ny6m604CNek35HeOnSbqlmJKq5pCIWAN/CcgN+vDRI066vfxJvCdJOgZ4t+h6qiUihm1mUTNwfCeW\n0qakTuSamaXO1+mbmSXEoW9mlhCHvplZQhz6ZmYJceibmSXk/wM7IirSQg0/8wAAAABJRU5ErkJg\ngg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_pos_bsns[[0,1,2,3,4,5]].head(6).plot(kind='bar', title = 'Top Positive reviews')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1af993eeb8>"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_neg_bsns[[0,1,2,3,4,5]].head(6).plot(kind='bar', title = 'Top Negative reviews')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
